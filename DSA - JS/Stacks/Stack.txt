──────────────────────────────────────────────
📚 STACK - Quick Revision Notes (DSA)
──────────────────────────────────────────────

🔹 What is a Stack?
-------------------
A **Stack** is a linear data structure that follows the **LIFO** (Last In First Out) principle.
- The last element inserted is the first one to be removed.

🔹 Real-life Examples:
----------------------
- Stack of plates
- Undo feature in editors
- Browser back/forward navigation

──────────────────────────────────────────────
🔹 Stack Operations (with Diagrams)
──────────────────────────────────────────────

1. **PUSH** (Insert an element at the top)
2. **POP** (Remove the top element)
3. **TOP/PEEK** (View the top element)
4. **isEmpty** (Check if stack is empty)
5. **isFull** (Check if stack is full, only for fixed-size stacks)

──────────────────────────────────────────────
🔹 Stack Diagram (Array Representation)
──────────────────────────────────────────────

Before PUSH(30):

Index:   0   1   2
        [10][20][  ]   ← topIndx = 2

After PUSH(30):

Index:   0   1   2
        [10][20][30]   ← topIndx = 3

POP removes 30, topIndx becomes 2.

──────────────────────────────────────────────
🔹 Stack Diagram (Linked List Representation)
──────────────────────────────────────────────

TOP → [30] → [20] → [10] → NULL

PUSH(40):

TOP → [40] → [30] → [20] → [10] → NULL

POP removes 40:

TOP → [30] → [20] → [10] → NULL

──────────────────────────────────────────────
🔹 Time Complexity
──────────────────────────────────────────────
- PUSH:    O(1)
- POP:     O(1)
- TOP:     O(1)
- isEmpty: O(1)
- Print:   O(n)

──────────────────────────────────────────────
🔹 Stack Implementation
──────────────────────────────────────────────
1. **Array-based Stack**
   - Fixed size (can overflow)
   - Fast, simple

2. **Linked List-based Stack**
   - Dynamic size (no overflow unless memory full)
   - Each node points to next

3. **STL Stack (C++ Standard Library)**
   - #include <stack>
   - Methods: push(), pop(), top(), empty(), size()

──────────────────────────────────────────────
🔹 Applications of Stack
──────────────────────────────────────────────
- Function call/return (call stack)
- Expression evaluation (postfix, infix, prefix)
- Syntax parsing (compilers)
- Undo/Redo operations
- Backtracking (mazes, puzzles)
- Parenthesis matching


 

──────────────────────────────────────────────
🔹 Stack - Key Points to Remember
──────────────────────────────────────────────
- LIFO: Last In, First Out
- Use for problems needing "reverse order" or "backtracking"
- Array stack: fixed size, fast
- LL stack: dynamic size, more memory per element
- All main operations are O(1)

──────────────────────────────────────────────
🔹 Visual Summary
──────────────────────────────────────────────
        PUSH(10)   PUSH(20)   PUSH(30)
         ┌─────┐    ┌─────┐    ┌─────┐
         │     │    │     │    │     │
         │     │    │     │    │ 30  │ ← top
         │     │    │ 20  │    │ 20  │
         │ 10  │    │ 10  │    │ 10  │
         └─────┘    └─────┘    └─────┘

        POP()
         ┌─────┐
         │     │
         │ 20  │ ← top
         │ 10  │
         └─────┘

──────────────────────────────────────────────
GOOD LUCK! You will score full marks! 🚀